// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Model;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20230525151432_MovieDB")]
    partial class MovieDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieAPI.Model.Movies", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("MovieAPI.Model.ScreeningSchedule", b =>
                {
                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("moviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("ScreeningId");

                    b.HasIndex("moviesMovieId");

                    b.ToTable("screeningSchedules");
                });

            modelBuilder.Entity("MovieAPI.Model.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNo")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("screeningSchedulesScreeningId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.HasIndex("screeningSchedulesScreeningId");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("MovieAPI.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MovieAPI.Model.ScreeningSchedule", b =>
                {
                    b.HasOne("MovieAPI.Model.Movies", "movies")
                        .WithMany("screeningSchdules")
                        .HasForeignKey("moviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movies");
                });

            modelBuilder.Entity("MovieAPI.Model.Ticket", b =>
                {
                    b.HasOne("MovieAPI.Model.User", "users")
                        .WithMany("ticket")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAPI.Model.ScreeningSchedule", "screeningSchedules")
                        .WithMany("ticket")
                        .HasForeignKey("screeningSchedulesScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("screeningSchedules");

                    b.Navigation("users");
                });

            modelBuilder.Entity("MovieAPI.Model.Movies", b =>
                {
                    b.Navigation("screeningSchdules");
                });

            modelBuilder.Entity("MovieAPI.Model.ScreeningSchedule", b =>
                {
                    b.Navigation("ticket");
                });

            modelBuilder.Entity("MovieAPI.Model.User", b =>
                {
                    b.Navigation("ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
